{"version":3,"sources":["MainPage/Julia.jpg","MainPage/MainPage.js","HeaderBar/HeaderBar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","MainPage","Fragment","Grid","container","direction","justify","alignItems","spacing","item","xs","sm","src","Julia","Paper","elevation","className","Button","to","target","download","HeaderBar","fixed","Brand","Item","Menu","Segment","align","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,mC,qQCsE5BC,EA3DE,WACb,OACI,kBAAC,IAAMC,SAAP,KACI,kBAACC,EAAA,EAAD,CACIC,WAAS,EACTC,UAAU,MACVC,QAAQ,SACRC,WAAW,UACXC,QAAS,GACT,kBAACL,EAAA,EAAD,CAAMM,MAAI,EAACC,GAAI,EAAGC,GAAI,GAClB,yBAAKC,IAAKC,OAEd,kBAACV,EAAA,EAAD,CAAMM,MAAI,EAACC,GAAI,GAAIC,GAAI,GACnB,kBAACG,EAAA,EAAD,CAAOC,UAAW,GACd,2BACI,0DACA,6BAFJ,wqBAgBZ,kBAACZ,EAAA,EAAD,CACIC,WAAS,EACTC,UAAU,MACVC,QAAQ,SACRC,WAAW,UACXC,QAAS,GACT,kBAACL,EAAA,EAAD,CAAMM,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAGK,UAAU,UAC/B,kBAACC,EAAA,EAAD,CAAQD,UAAU,UACd,kBAAC,IAAD,CAAME,GAAG,wBAAwBC,OAAO,SAASH,UAAU,WAAWI,UAAQ,GAA9E,qBAGR,kBAACjB,EAAA,EAAD,CAAMM,MAAI,EAACC,GAAI,GAAIC,GAAI,GAEnB,wBAAIK,UAAU,YACd,2BACI,0CACA,6BAFJ,2CAIA,6BAJA,2B,wBCpBLK,G,YAvBG,kBACd,kBAAC,IAAMnB,SAAP,KACE,kBAAC,IAAD,CAAQoB,MAAM,MAAMN,UAAU,UAC5B,kBAAC,IAAOO,MAAR,KACE,kBAAC,IAAOC,KAAR,CAAaR,UAAU,SACrB,kBAAC,IAAD,CAASE,GAAG,IAAIF,UAAU,SAA1B,aAGJ,kBAAC,IAAOS,KAAR,KACE,kBAAC,IAAOC,QAAR,CAAgBC,MAAM,OACpB,kBAAC,IAAOH,KAAR,CAAaR,UAAU,OACrB,kBAAC,IAAD,CAASE,GAAG,IAAIF,UAAU,SAA1B,aAEF,kBAAC,IAAOQ,KAAR,CAAaR,UAAU,OACrB,kBAAC,IAAD,CAASE,GAAG,WAAWF,UAAU,SAAjC,gBAKR,kBAAC,IAAD,CAAWA,UAAU,eCIZY,EArBH,WACV,OACE,kBAAC,IAAM1B,SAAP,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO2B,KAAK,cAEZ,kBAAC,IAAD,CAAOA,KAAK,KACV,kBAAC,EAAD,WCXQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.78b80c68.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Julia.1c243993.jpg\";","import React from 'react';\r\nimport { Grid, Paper, Divider, Button } from '@material-ui/core';\r\nimport Julia from \"./Julia.jpg\"\r\nimport './MainPage.css';\r\nimport {\r\n    Link\r\n} from \"react-router-dom\";\r\n\r\n\r\n\r\n\r\nconst MainPage = () => {\r\n    return (\r\n        <React.Fragment>\r\n            <Grid\r\n                container\r\n                direction=\"row\"\r\n                justify=\"center\"\r\n                alignItems=\"stretch\"\r\n                spacing={3}>\r\n                <Grid item xs={2} sm={2}>\r\n                    <img src={Julia} />\r\n                </Grid>\r\n                <Grid item xs={12} sm={6}>\r\n                    <Paper elevation={0}>\r\n                        <p>\r\n                            <b>Hi, my name is Julia Brain!</b>\r\n                            <br />\r\n                    I am currently a senior at Northwestern majoring in computer science\r\n                with a focus in UI/UX. I am also pursuing both a minor in English Literature and the Segal\r\n                Design Certificate. I am passionate about user experience, and there is no better feeling\r\n                than seeing a user delighted by a small design feature that makes all the difference between\r\n                a normal product and an amazing experience. I have worked on both computer science projects\r\n                as well as more physical products in order to create the best user experience possible.\r\n                In the future, I want to use my coding ability as well as my design ability to help create\r\n                    and change software to best serve the user and the company.\r\n                    </p>\r\n                    </Paper>\r\n\r\n                </Grid>\r\n            </Grid>\r\n            <Grid\r\n                container\r\n                direction=\"row\"\r\n                justify=\"center\"\r\n                alignItems=\"stretch\"\r\n                spacing={3}>\r\n                <Grid item xs={2} sm={2} className=\"center\">\r\n                    <Button className=\"center\">\r\n                        <Link to=\"/Brain_Julia_2019.pdf\" target=\"_blank\" className=\"download\" download>Download Resume</Link>\r\n                    </Button>\r\n                </Grid>\r\n                <Grid item xs={12} sm={6} >\r\n\r\n                    <hr className=\"divider\" />\r\n                    <p>\r\n                        <b>Contact me!</b>\r\n                        <br />\r\n                    Email: JuliaBrain2020@u.northwestern.edu\r\n                    <br />\r\n                    Phone: 815-762-1808\r\n                </p>\r\n                </Grid>\r\n            </Grid>\r\n        </React.Fragment>\r\n\r\n    )\r\n\r\n}\r\n\r\nexport default MainPage","import React from 'react';\r\nimport 'rbx/index.css';\r\nimport './HeaderBar.css';\r\nimport { Navbar, Container } from 'rbx';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  NavLink\r\n} from \"react-router-dom\";\r\n\r\n\r\nconst HeaderBar = () => (\r\n    <React.Fragment>\r\n      <Navbar fixed='top' className='header' >\r\n        <Navbar.Brand >\r\n          <Navbar.Item className='title'>\r\n            <NavLink to='/' className='wLink'>J Brain</NavLink>\r\n          </Navbar.Item>\r\n        </Navbar.Brand>\r\n        <Navbar.Menu>\r\n          <Navbar.Segment align='end'>\r\n            <Navbar.Item className='tab'>\r\n              <NavLink to='/' className='wLink'>About Me</NavLink>\r\n            </Navbar.Item>\r\n            <Navbar.Item className='tab'>\r\n              <NavLink to='projects' className='wLink'>Projects</NavLink>\r\n            </Navbar.Item>\r\n          </Navbar.Segment>\r\n        </Navbar.Menu>\r\n      </Navbar>\r\n      <Container className='spacing' />\r\n    </React.Fragment>\r\n  )\r\n\r\nexport default HeaderBar","import React from 'react';\r\nimport MainPage from './MainPage/MainPage';\r\nimport 'rbx/index.css';\r\n//import './HeaderBar.css';\r\nimport { Navbar, Container } from 'rbx';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  NavLink\r\n} from \"react-router-dom\";\r\nimport './App.css';\r\nimport HeaderBar from './HeaderBar/HeaderBar'\r\n\r\nconst App = () => {\r\n  return (\r\n    <React.Fragment>\r\n      <Router>\r\n        <HeaderBar />\r\n        <Switch>\r\n          <Route path='/projects'>\r\n          </Route>\r\n          <Route path='/'>\r\n            <MainPage />\r\n          </Route>\r\n        </Switch>\r\n      </Router>\r\n    </ React.Fragment>\r\n  )\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}