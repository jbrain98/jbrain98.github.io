{"version":3,"sources":["Projects/projectPics/FAB/FABmainpic.png","MainPage/Julia.jpg","Projects/projectPics/FAB/icon.png","Projects/projectPics/FAB/MyStats.png","Projects/projectPics/FAB/question.png","Projects/projectPics/FAB/Post.png","Projects/projectPics/FAB/vote.png","MainPage/MainPage.js","Projects/ProjectPage.js","Projects/projectPages/FAB.js","HeaderBar/HeaderBar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","MainPage","Fragment","Grid","container","direction","justify","alignItems","spacing","item","xs","sm","src","Julia","Paper","elevation","className","Button","to","target","download","projectList","FABmainpic","title","Project","project","console","log","md","Card","class","CardActions","ProjectPage","map","FABPage","icon","question","Post","MyStats","vote","HeaderBar","fixed","Brand","Item","Menu","Segment","align","App","path","FAB","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.48bc33b1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/FABmainpic.567c36e4.png\";","module.exports = __webpack_public_path__ + \"static/media/Julia.1c243993.jpg\";","module.exports = __webpack_public_path__ + \"static/media/icon.acdcdc64.png\";","module.exports = __webpack_public_path__ + \"static/media/MyStats.942feeba.png\";","module.exports = __webpack_public_path__ + \"static/media/question.9fb70400.png\";","module.exports = __webpack_public_path__ + \"static/media/Post.cdd4fd7c.png\";","module.exports = __webpack_public_path__ + \"static/media/vote.582349d0.png\";","import React from 'react';\r\nimport { Grid, Paper, Divider, Button } from '@material-ui/core';\r\nimport Julia from \"./Julia.jpg\"\r\nimport './MainPage.css';\r\nimport {\r\n    Link\r\n} from \"react-router-dom\";\r\n\r\n\r\n\r\n\r\nconst MainPage = () => {\r\n    return (\r\n        <React.Fragment>\r\n            <Grid\r\n                container\r\n                direction=\"row\"\r\n                justify=\"center\"\r\n                alignItems=\"stretch\"\r\n                spacing={3}>\r\n                <Grid item xs={6} sm={2}>\r\n                    <img src={Julia} />\r\n                </Grid>\r\n                <Grid item xs={10} sm={6}>\r\n                    <Paper elevation={0}>\r\n                        <p>\r\n                            <b>Hi, my name is Julia Brain!</b>\r\n                            <br />\r\n                    I am currently a senior at Northwestern majoring in computer science\r\n                with a focus in UI/UX. I am also pursuing both a minor in English Literature and the Segal\r\n                Design Certificate. I am passionate about user experience, and there is no better feeling\r\n                than seeing a user delighted by a small design feature that makes all the difference between\r\n                a normal product and an amazing experience. I have worked on both computer science projects\r\n                as well as more physical products in order to create the best user experience possible.\r\n                In the future, I want to use my coding ability as well as my design ability to help create\r\n                    and change software to best serve the user and the company.\r\n                    </p>\r\n                    </Paper>\r\n\r\n                </Grid>\r\n            </Grid>\r\n            <Grid\r\n                container\r\n                direction=\"row\"\r\n                justify=\"center\"\r\n                alignItems=\"stretch\"\r\n                spacing={3}>\r\n                <Grid item xs={6} sm={2} className=\"center\">\r\n                    <Button className=\"center\">\r\n                        <Link to=\"/Brain_Julia_2019.pdf\" target=\"_blank\" className=\"download\" download>Download Resume</Link>\r\n                    </Button>\r\n                </Grid>\r\n                <Grid item xs={10} sm={6} >\r\n\r\n                    <hr className=\"divider\" />\r\n                    <p>\r\n                        <b>Contact me!</b>\r\n                        <br />\r\n                    Email: JuliaBrain2020@u.northwestern.edu\r\n                    <br />\r\n                    Phone: 815-762-1808\r\n                </p>\r\n                </Grid>\r\n            </Grid>\r\n        </React.Fragment>\r\n\r\n    )\r\n\r\n}\r\n\r\nexport default MainPage","import React from 'react';\r\nimport { Grid, Paper, Divider, Button, Card, CardContent, CardMedia, CardActions } from '@material-ui/core';\r\nimport \"./ProjectPage.css\"\r\nimport FABmainpic from \"./projectPics/FAB/FABmainpic.png\"\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    NavLink,\r\n    Link\r\n} from \"react-router-dom\";\r\n\r\n\r\nconst projectList = [{ src: FABmainpic, title: \"FAB\" }, { src: FABmainpic, title: \"FAB\" }, { src: FABmainpic, title: \"FAB\" }]\r\n\r\nconst ProjectPage = () => {\r\n    return (\r\n        <Grid\r\n            container\r\n            direction=\"row\"\r\n            justify=\"center\"\r\n            alignItems=\"stretch\"\r\n            spacing={3}>\r\n            <Grid item xs={10} >\r\n                <b>Projects</b>\r\n                <hr className=\"divider\" />\r\n            </Grid>\r\n            <Grid container item xs={10} direction=\"row\"\r\n                justify=\"center\"\r\n                alignItems=\"stretch\"\r\n                spacing={3}>\r\n                {projectList.map((project) =>\r\n                    <Project project={project} />)\r\n                }\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n\r\n}\r\n\r\n\r\nconst Project = (project) => {\r\n    console.log(project)\r\n    return (\r\n        <Grid item xs={10} sm={5} md={4}>\r\n            <Card className=\"center\">\r\n                <img src={project.project.src} class=\"prjpic\" />\r\n                <CardActions className=\"center\">\r\n                    <Button className=\"center\">\r\n                        <Link to={project.project.title}>\r\n                            <b>{project.project.title}</b>\r\n                        </Link>\r\n                    </Button>\r\n                </CardActions>\r\n            </Card>\r\n        </Grid>\r\n    )\r\n\r\n}\r\n\r\nexport default ProjectPage","import React from 'react';\r\nimport { Grid, Paper, Divider, Button, Card, CardContent, CardMedia, CardActions } from '@material-ui/core';\r\nimport \"../ProjectPage.css\"\r\nimport FABmainpic from \"../projectPics/FAB/FABmainpic.png\"\r\nimport icon from \"../projectPics/FAB/icon.png\"\r\nimport MyStats from \"../projectPics/FAB/MyStats.png\"\r\nimport question from \"../projectPics/FAB/question.png\"\r\nimport Post from \"../projectPics/FAB/Post.png\"\r\nimport vote from \"../projectPics/FAB/vote.png\"\r\n\r\nconst FABPage = () => {\r\n    return (\r\n        <Grid\r\n            container\r\n            direction=\"row\"\r\n            justify=\"center\"\r\n            spacing={5}>\r\n            <Grid item xs={10} >\r\n                <p className=\"heading\">FAB</p>\r\n                <hr className=\"divider\" />\r\n            </Grid>\r\n            <Grid item xs={10} sm={5} className=\"left\">\r\n                <img src={icon} className=\"prjpic\" />\r\n                <br />\r\n                <b>Technologies</b>\r\n                <p>React Native, GitHub, Expo, Firebase</p>\r\n                <br />\r\n                <b>Partnership</b>\r\n                <p>I worked on a development team with five other coders.\r\n                We communicated with the client team on a bi-weekly basis for five weeks while developing this app.\r\n                While they were responsible for the ideation, research, and styling, my team was responsible for all\r\n                the front and back end coding. Along the way, we had to\r\n                complete burnup charts and provide feedback to the clients to\r\n                ensure that expectations were being met.\r\n                    </p>\r\n                <br />\r\n                <img src={question} className=\"prjpicb\" />\r\n                <br />\r\n                <b>Sprinting Towards the Goal</b>\r\n                <br />\r\n                <p>\r\n                    After testing, we started working in sprints on the other user stories (voting, viewing a profile page, and creating a new post)\r\n                    in the order both teams determined would be the most difficult to code and the most important to test. Each week my team also\r\n                    made changes to the app based off user testing of the features completed in previous sprints. We kept track of our working\r\n                    with a Burn Up chart.\r\n                </p>\r\n                <br />\r\n                <img src={Post} className=\"prjpicb\" />\r\n                <br />\r\n                <b>Takeaways</b>\r\n                <br />\r\n                <p>\r\n                    I learned through this project how to take an agile approach to software development.\r\n                    My development team was able to form expectation for both ourselves\r\n                    and the client team what was going to be done for each sprint and how long each change would take by using a Burn Up chart.\r\n                    I also developed more skill in communicating with a client team that did\r\n                    not have any coding experience. I think a lot of time in student projects it is very self-designed\r\n                    and driven. However, in a business setting there are also cases where a developer’s\r\n                    responsibility is to implement another’s design and it is important to be able to do both.\r\n                </p>\r\n\r\n            </Grid>\r\n            <Grid item xs={10} sm={5} className=\"right\">\r\n                <b>Crowdsourcing Fashion</b>\r\n                <p>How might one use a phone app to figure out what one should wear to their next big work presentation?\r\n                        <br />\r\n                        This was the question posed to my team by a team of graduate design students.\r\n                         Together, the developer and client teams worked on a phone app that allowed users to post two outfit choices\r\n                          and vote on other’s posts so users get help\r\n                           deciding what to wear.\r\n                    </p>\r\n                <br />\r\n                <img src={MyStats} className=\"prjpicb\" />\r\n                <br />\r\n                <b>Testing the \"Payoff\"</b>\r\n                <br />\r\n                <p>\r\n                    My team worked in week-long agile sprints during development.\r\n                    For each sprint, we primarily focused on one user storyline.\r\n                    The first week we focused on the so called “payoff” screen using canned data.\r\n                    We determined - based off the storyboard we created - that the results screen for a\r\n                    post was the most needed so we could gather feedback on user interest in the app.\r\n                    </p>\r\n                <br />\r\n                <b>Gamification\"</b>\r\n                <br />\r\n                <p>\r\n                    The clients decided after inital user testing that we needed to add a gamification element to the app\r\n                    to increase incentive to vote.\r\n                    To do so, the clients decided to add an “Influencer” status to users who vote correctly 80% of the time.\r\n                    If a user had this status we rewarded them by counting their votes as double as they were more “trustworthy” based of their previous record.\r\n                    However, this created additional challenges for my developer team, as we had to restructure the database in order to keep\r\n                    track of who voted and for which option in each poll.\r\n\r\n                    </p>\r\n                <br />\r\n                <img src={vote} className=\"prjpicb\" />\r\n                <br />\r\n                <b>My Impact</b>\r\n                <br />\r\n                <p>\r\n                    I focused mainly on the backend for this project, although I did some front-end as well.\r\n                    I was primarily responsible for the database and I took the lead in creating the database schema.\r\n                    In the first sprints I wrote code to pull canned data I had uploaded to the database to display on the results page\r\n                    and the user profile page. After testing to make sure canned data was being pulled and displayed correctly,\r\n                    I implemented the functions that switched it to real, updating data. This included coding it so\r\n                    that each time a user opens the app it would either\r\n                    load the information from the user entry associated with the phone’s id or create a new user entry.\r\n                    I was also in charge of the logic and implementation behind how each user’s vote was counted\r\n                    for the running score and the final score. Based off this, I updated the user stats displayed on the\r\n                    user’s page, including determining if they met “Influencer” status or not. I single-handedly wrote\r\n                    the functions that ran after each post’s time limit of 24 hours expired. These functions updated\r\n                    the score of each person who voted and took them off this list of posts that could be voted on.\r\n                    I also worked further filtering the posts each user could vote on by only allowing them to vote\r\n                    once per post and only on others' posts. For the front end, I created the user stats bar by\r\n                    myself as well as doing other minor UI changes included in the different sprints.\r\n\r\n                    </p>\r\n                <br />\r\n            </Grid>\r\n\r\n        </Grid>\r\n\r\n    )\r\n\r\n}\r\n\r\nconst Heading = (text) => (\r\n    <p>\r\n        <b>{text}</b>\r\n        <br />\r\n    </p>\r\n\r\n)\r\n\r\n\r\n\r\nexport default FABPage","import React from 'react';\r\nimport 'rbx/index.css';\r\nimport './HeaderBar.css';\r\nimport { Navbar, Container } from 'rbx';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  NavLink\r\n} from \"react-router-dom\";\r\n\r\n\r\nconst HeaderBar = () => (\r\n    <React.Fragment>\r\n      <Navbar fixed='top' className='header' >\r\n        <Navbar.Brand >\r\n          <Navbar.Item className='title'>\r\n            <NavLink to='/' className='wLink'>J Brain</NavLink>\r\n          </Navbar.Item>\r\n        </Navbar.Brand>\r\n        <Navbar.Menu>\r\n          <Navbar.Segment align='end'>\r\n            <Navbar.Item className='tab'>\r\n              <NavLink to='/' className='wLink'>About Me</NavLink>\r\n            </Navbar.Item>\r\n            <Navbar.Item className='tab'>\r\n              <NavLink to='projects' className='wLink'>Projects</NavLink>\r\n            </Navbar.Item>\r\n          </Navbar.Segment>\r\n        </Navbar.Menu>\r\n      </Navbar>\r\n      <Container className='spacing' />\r\n    </React.Fragment>\r\n  )\r\n\r\nexport default HeaderBar","import React from 'react';\r\nimport MainPage from './MainPage/MainPage';\r\nimport ProjectPage from './Projects/ProjectPage';\r\nimport FABPage from './Projects/projectPages/FAB'\r\nimport 'rbx/index.css';\r\n//import './HeaderBar.css';\r\nimport { Navbar, Container } from 'rbx';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  NavLink\r\n} from \"react-router-dom\";\r\nimport './App.css';\r\nimport HeaderBar from './HeaderBar/HeaderBar'\r\n\r\nconst App = () => {\r\n  return (\r\n    <React.Fragment>\r\n      <Router>\r\n        <HeaderBar />\r\n        <Switch>\r\n          <Route path='/projects'>\r\n            <ProjectPage />\r\n          </Route>\r\n          <Route path='/FAB'>\r\n            <FABPage />\r\n          </Route>\r\n          <Route path='/'>\r\n            <MainPage />\r\n          </Route>\r\n        </Switch>\r\n      </Router>\r\n    </ React.Fragment>\r\n  )\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}